<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4020.6">
  <POU Name="FB_TCP" Id="{4b1b7a1f-ef81-4f06-8a09-5c3e603fef73}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_TCP
VAR_INPUT
	xEnable : BOOL;					//true enables the communication and connect to host. False is like a reset: disconecting and disabling all Communication
	xForceDisconnect : BOOL;		//force a disconnect. Only needed when the Program starts the first time or when there is a Reset
	TxRx : ST_TxRx;					//Tx and Rx Strings
	TCPParam : ST_ParamTCP;			//Parameters for the Communication
	
	OutputDisconnect : ST_Output;	//Error and Output variales of each Method
	OutputDisconnectAll : ST_Output;
	OutputConnect : ST_Output;
	OutputSend : ST_Output;
	OutputReceive : ST_Output;

END_VAR
VAR_OUTPUT
	OutputGlobal : ST_Output;		//Global Error and Output struct
END_VAR
VAR
	fbConnect : FB_SocketConnect;		//for Method MConnect
	fbDisconnectAll : FB_SocketCloseAll;
	fbDisconnect : FB_SocketClose;
	FEdgeBusyConnect : F_Trig;
	REdge : R_Trig;	
	FEdge : F_Trig;
	
	fbReceive : FB_SocketReceive;		//for Method MReceive
	Timer : TON;
	xReceiveToFast: BOOL;
	sReceivedBuffer : STRING;
	
	fbSend : FB_SocketSend;				//for Method MSend
	fbRTrig:F_Trig;
	
	iCounter : INT;						//used in MCognex
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[mConnect();
mSend();
mReceive();
mCognex();

//******************************************
//Output actions
//******************************************

//Busy
OutputGlobal.xBusy:=OutputReceive.xBusy OR OutputSend.xBusy OR OutputConnect.xBusy OR OutputDisconnect.xBusy OR OutputDisconnectAll.xBusy;
//Errors
IF(OutputReceive.xError) THEN
	OutputGlobal.xError:=TRUE;
	OutputGlobal.nErrID:=OutputReceive.nErrID;
ELSIF (OutputSend.xError) THEN
	OutputGlobal.xError:=TRUE;
	OutputGlobal.nErrID:=OutputSend.nErrID;
ELSIF (OutputConnect.xError) THEN
	OutputGlobal.xError:=TRUE;
	OutputGlobal.nErrID:=OutputConnect.nErrID;
ELSIF (OutputDisconnect.xError) THEN
	OutputGlobal.xError:=TRUE;
	OutputGlobal.nErrID:=OutputDisconnect.nErrID;
ELSIF (OutputDisconnectAll.xError) THEN
	OutputGlobal.xError:=TRUE;
	OutputGlobal.nErrID:=OutputDisconnectAll.nErrID;
ELSE
	OutputGlobal.xError:=FALSE;
END_IF]]></ST>
    </Implementation>
    <Method Name="mCognex" Id="{9597371e-e516-4a62-bf56-42125412a386}">
      <Declaration><![CDATA[METHOD PUBLIC mCognex
VAR
	TempPos1 : INT;
	TempPos2 : INT;
	
	Temp1: STRING;
	Temp2 : STRING;
	Temp3:STRING;
	
	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//etablish a Telnet-Connection to the Camera to communicate via the native Protocoll
IF TCPParam.xConnected AND TCPParam.xCognexMode THEN
	IF TxRx.sReceived='User: ' AND iCounter=0 THEN
		TxRx.sSend:='admin';
		iCounter:=1;
	END_IF
	IF TxRx.sReceived='Password: ' AND iCounter=1 THEN
		TxRx.sSend:='$R$N';
		iCounter:=2;
	END_IF
	IF TxRx.sReceived='User Logged In$R$N' AND iCounter=2 THEN
		TCPParam.xConnectedCognex:=TRUE;
	END_IF
END_IF

//when the camera sends the mesured data extract them from the String
IF TCPParam.xConnected AND TCPParam.xCognexMode THEN
	IF FIND(fbTCP.TxRx.sReceived,'PASS')>0 OR FIND(fbTCP.TxRx.sReceived,'FAIL')>0 THEN
		//The camera has send the string with the Mesurement results
		//extract mesured values
		TempPos1:=FIND(fbTCP.TxRx.sReceived, ';e:');
		TempPos2:=FIND(fbTCP.TxRx.sReceived, ';h:');
		OutputGlobal.Resulte:=MID(fbTCP.TxRx.sReceived,TempPos2-(TempPos1+3),TempPos1+3);
		
		TempPos1:=FIND(fbTCP.TxRx.sReceived, ';h:');
		TempPos2:=FIND(fbTCP.TxRx.sReceived, ';d:');
		OutputGlobal.Resulth:=MID(fbTCP.TxRx.sReceived,TempPos2-(TempPos1+3),TempPos1+3);
		
		TempPos1:=FIND(fbTCP.TxRx.sReceived, ';d:');
		TempPos2:=FIND(fbTCP.TxRx.sReceived, ';b1:');
		OutputGlobal.Resultd:=MID(fbTCP.TxRx.sReceived,TempPos2-(TempPos1+3),TempPos1+3);
		
		//extract Bool 
		TempPos1:=FIND(fbTCP.TxRx.sReceived, ';b1:');
		OutputGlobal.Boole:=STRING_TO_INT(MID(fbTCP.TxRx.sReceived,1,TempPos1+4));
		
		TempPos1:=FIND(fbTCP.TxRx.sReceived, ';b2:');
		OutputGlobal.Boolh:=STRING_TO_INT(MID(fbTCP.TxRx.sReceived,1,TempPos1+4));
		
		TempPos1:=FIND(fbTCP.TxRx.sReceived, ';b3:');
		OutputGlobal.Boold:=STRING_TO_INT(MID(fbTCP.TxRx.sReceived,1,TempPos1+4));
	END_IF
	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="mConnect" Id="{14c4892f-d874-4037-a124-ab30f97c8b2f}">
      <Declaration><![CDATA[METHOD PUBLIC mConnect
VAR_INPUT

END_VAR
VAR
	
	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Detecting Rising and falling edge of xEnable and nBusyConnect
REdge(CLK:=xEnable);
FEdge(CLK:=xEnable);
FEdgeBusyConnect(CLK:=fbConnect.bBusy);

//when there is a falling edge on xEnable do a normal déconnection
fbDisconnect.tTimeout:=TCPParam.tTimeout;
fbDisconnect.hSocket:=TCPParam.hSocket;
fbDisconnect.sSrvNetId:=TCPPAram.NetID;
fbDisconnect.bExecute:=FEdge.Q;
fbDisconnect();
OutputDisconnect.xBusy:=fbDisconnect.bBusy;
//TODO: Issue #1
//OutputDisconnect.xError:=fbDisconnect.bError;
OutputDisconnect.nErrID:=403; //TODO: use the errors provided by the FB: Issue #2
IF (FEdge.Q) THEN
	TCPParam.xConnected:=FALSE;
	TCPParam.xConnectedCognex:=FALSE;
	iCounter:=0;
	TCPParam.hSocket.handle:=0;
END_IF

//force disconnecting when xForceDisconnect
fbDisconnectAll.bExecute:=xForceDisconnect;
fbDisconnectAll.tTimeout:=TCPParam.tTimeout;
fbDisconnectAll.sSrvNetId:=TCPPAram.NetID;
fbDisconnectAll();
OutputDisconnectAll.xBusy:=fbDisconnectAll.bBusy;
OutputDisconnectAll.xError:=fbDisconnectAll.bError;
OutputDisconnectAll.nErrID:=403;	//TODO: use the errors provided by the FB: Issue #2
IF (xForceDisconnect) THEN
	TCPParam.xConnected:=FALSE;
	xForceDisconnect:=FALSE;
	xEnable:=FALSE;
	TCPParam.xConnectedCognex:=FALSE;
	iCounter:=0;
	TCPParam.hSocket.handle:=0;
	xReceiveToFast:=FALSE;
END_IF

//Connect to the Server
fbConnect.nRemotePort:=TCPPAram.nRemotePort;
fbConnect.sSrvNetId:=TCPParam.NetID;
fbConnect.sRemoteHost:=TCPParam.sRemoteHost;
fbConnect.tTimeout:=TCPPAram.tTimeout;
fbConnect.bExecute:=REdge.Q;
fbConnect();
OutputConnect.xBusy:=fbConnect.bBusy;
OutputConnect.xError:=fbConnect.bError;
OutputConnect.nErrID:=403;	//TODO: use the errors provided by the FB: Issue #2

IF FEdgeBusyConnect.Q AND fbConnect.hSocket.handle <> 0 THEN
	TCPParam.xConnected:=TRUE;
	TCPParam.xConnectedCognex:=FALSE;
	TCPParam.hSocket:=fbConnect.hSocket;
	iCounter:=0;
	xReceiveToFast:=FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="mReceive" Id="{27a39fd8-18a9-49dd-b944-010ba65bd7e0}">
      <Declaration><![CDATA[METHOD PUBLIC mReceive

]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Receive data / check for new data each 250mS
Timer.PT:=T#250MS;
//Timer should only work if TCP is currently connected
Timer(IN:=TCPParam.xConnected);

IF (Timer.Q) THEN
	Timer(IN:=FALSE);
	fbReceive.tTimeout:=TCPPAram.tTimeout;
	fbReceive.sSrvNetId:=TCPPAram.NetID;
	fbReceive.cbLen:=200;
	fbReceive.hSocket:=TCPParam.hSocket;
	fbReceive.bExecute:=TRUE;
	fbReceive.pDest:=ADR(sReceivedBuffer);
	IF fbReceive.nRecBytes>0 THEN  //some data received
		IF (TxRx.sReceived='') THEN
			xReceiveToFast:=FALSE;
			TxRx.sReceived:=LEFT(STR:=sReceivedBuffer,SIZE:=UDINT_TO_INT(fbReceive.nRecBytes-2));
		ELSE
			xReceiveToFast:=TRUE;
		END_IF
	END_IF	
ELSE
	fbReceive.bExecute:=FALSE;
END_IF
fbReceive();

//******************************************
//Output actions
//******************************************

OutputReceive.xBusy:=fbReceive.bBusy;
IF xReceiveToFast THEN
	OutputReceive.xError:=TRUE;
	OutputReceive.nErrID:=401;	//TODO: use the errors provided by the FB: Issue #2
ELSE
	OutputReceive.xError:=fbReceive.bError;
	OutputReceive.nErrID:=404;	//TODO: use the errors provided by the FB: Issue #2
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="mSend" Id="{efd282ab-cfec-43b7-84e2-09e93da75cbe}">
      <Declaration><![CDATA[METHOD PUBLIC mSend
VAR_INPUT

END_VAR
VAR

END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF(TCPParam.xConnected) THEN //only sending when connected
	//Send data when there is something to Send
	fbSend.cbLen:=INT_TO_UINT(LEN(CONCAT(TxRx.sSend,'$R$L')));
	IF(fbSend.cbLen>2 OR fbSend.bBusy) THEN
		IF TxRx.sSend='$R$L' THEN
			fbsend.cbLen:=4;	//only send an "Enter"
		ELSE
			TxRx.sSend:=CONCAT(TxRx.sSend,'$R$L'); //send a whole message
		END_IF
		fbSend.pSrc:=ADR(TxRx.sSend);
		fbSend.sSrvNetId:=TCPPAram.NetID;
		fbSend.hSocket:=TCPParam.hSocket;
		fbSend.tTimeout:=TCPParam.tTimeout;
		fbSend.bExecute:=TRUE;
	END_IF
	fbRTrig(CLK:=fbSend.bBusy);
	IF (fbRTrig.Q) THEN
		fbSend.bExecute:=FALSE;
		TxRx.sSend:='';
	END_IF
	fbSend();
	
	//******************************************
	//Output actions
	//******************************************
	
	OutputSend.xBusy:=fbSend.bBusy;
	OutputSend.xError:=fbSend.bError;
	OutputSend.nErrID:=402;	//TODO: use the errors provided by the FB: Issue #2
	
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>
<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4020.6">
  <POU Name="FB_ConfigAnalog" Id="{42bb8469-1f67-4f9a-9ae7-94da8136d280}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_ConfigAnalog
VAR_INPUT
	uiNbreBitBus: UINT;		//resolution of the Bus in Bits
	(* revoir lequel des deux Bit... est vraiment utilisé *)
	uiNbreBitConv: UINT;	//resolution in bit of the AD-Converter 
	stTension: ST_minMax;	//max / min possible tension on the physical Pins
	stValeur: ST_minMax;	//max / min possible value in the user defined unit (ex. rot/min)
END_VAR
VAR
	udiNbreIncBus: UDINT;	//
	lrTemp: LREAL;			//
	lrValInc: LREAL;		//number of possible increments on the Bus
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="mCalculDelta" Id="{c872881f-9282-4ffa-843c-d87b8b2bc91d}">
      <Declaration><![CDATA[METHOD mCalculDelta : LREAL
VAR_INPUT
	stMinMax: ST_MinMax;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[mCalculDelta:=stMinMax.lrMax-stMinMax.lrMin;]]></ST>
      </Implementation>
    </Method>
    <Method Name="mCalculInc" Id="{4469b176-bd1f-4057-acbc-78554f3fd20f}">
      <Declaration><![CDATA[METHOD mCalculInc : UDINT
VAR_INPUT
	uiNbreBitBus: UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
mCalculInc:=SHL(1,uiNbreBitBus);
//mCaclulInc:=EXPT(2,uiNbreBitBus);]]></ST>
      </Implementation>
    </Method>
    <Method Name="mConvertAnToVal" Id="{2b296985-75aa-4480-8599-a1b6f16cff8c}">
      <Declaration><![CDATA[METHOD mConvertAnToVal : LREAL
VAR_INPUT
	lrAna: LREAL; 		//RAW input value from the Analog Pin
END_VAR
VAR_OUTPUT
	///tension de la borne de sortie
	(* can this be removed ? *) lrTension: LREAL;
	///Ecart de l'escalier sur la borne de sortie en unité de valeur
	(* can this be removed ? *) lrEcart: LREAL;
	lrValeur: LREAL;	//Converted value in the user unit	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Calculate number of increments
udiNbreIncBus:=mCalculInc(uiNbreBitBus);

//Start Converting
//apply a gain to the RAW input value
lrValeur:=0;	//réponse = 0 si hors condition
IF mCalculDelta(stValeur)<>0 THEN
	lrValeur:=(mCalculDelta(stValeur)/udiNbreIncBus)*lrAna;
END_IF

//Solution
mConvertAnToVal:=lrValeur;

(* are the following needed? *)
//Calculate the increment in the tension
lrEcart:=(mCalculDelta(stTension)/udiNbreIncBus);
//Solution in Voltage on the Input Pin
lrTension:=lrValInc*lrEcart+stTension.lrMin;]]></ST>
      </Implementation>
    </Method>
    <Method Name="mConvertValToAn" Id="{c493e7d9-6467-4aea-9f8d-7a41b90d966d}">
      <Declaration><![CDATA[METHOD mConvertValToAn : DINT
VAR_INPUT
	lrVal: LREAL;		//this is the setpoint value in the user unit
END_VAR
VAR_OUTPUT
	lrTension: LREAL;	//tension on the physical output pins
	lrEcart: LREAL;		//Error on the physical output
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Verfication if lrVal is really in the possible range set in stValeur
lrVal:=LIMIT(stValeur.lrMin,lrVal,stValeur.lrMax);

//Calculate the number of increments
udiNbreIncBus:=mCalculInc(uiNbreBitBus);

//Start Converting
//deltaTension/Nbreinc <-> deltaVal/Nbreinc val
lrTemp:=0;	//réponse = 0 si hors condition
IF mCalculDelta(stValeur)<>0 THEN
	//nombre d'incréments par rapport à lrVal, avec décalage de stValeur.lrMin
	lrValInc:=udiNbreIncBus*(lrVal-stValeur.lrMin)/mCalculDelta(stValeur);
	//décalage selon min max de la tension
	IF stTension.lrMin<0 THEN
		//ajout de l'offset si min négatif
		lrTemp:=lrValInc-udiNbreIncBus/2-1;
		ELSE
		lrTemp:=lrValInc;
	END_IF
END_IF
//résultat de la méthode
mConvertValToAn:=LREAL_TO_DINT(lrTemp);
//calcul de l'incrément tension
lrEcart:=(mCalculDelta(stTension)/udiNbreIncBus);
//résultat en unitée de tension
lrTension:=lrValInc*lrEcart+stTension.lrMin;
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>
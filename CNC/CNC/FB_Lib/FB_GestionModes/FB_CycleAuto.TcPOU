<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4020.12">
  <POU Name="FB_CycleAuto" Id="{1fbfed49-0f3f-4cfc-86b2-0a4b85d7cccf}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_CycleAuto
VAR_INPUT
	xStart:BOOL;
	xStop:BOOL;
	xReset:BOOL;
END_VAR
VAR_OUTPUT	
	xBusy:BOOL;
	xReady:BOOL;
	xError:BOOL;
	iEtape:INT;
	iId : INT; 			//error number currently active
	iNumberProduced : INT;
END_VAR
VAR
	fbEtape:FB_Etape;
	fbRtrigStart:R_trig;
	xMemStop:BOOL:=FALSE;		//Memorise the Stop-Flag
	fbMoteur: INT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[fbEtape.mActualisation(stParam.stStatus.xModePasAPas,fbBtn.xNextPas);

fbRtrigStart(clk:=xStart);

IF xStop THEN
	xMemStop:=TRUE;
END_IF

IF xReset THEN
	fbEtape.piVal:=0;
	xBusy:=FALSE;
END_IF

CASE fbEtape.iNo OF
	0:	fbEtape.psMess:='Auto | Start Cycle';
		IF fbRtrigStart.Q THEN
			xMemStop:=FALSE;
			fbEtape.piVal:=1;
			iNumberProduced:=0;
		END_IF
	1: fbEtape.psMess:='Auto | Check if initialized';
		IF  stParam.stMachine.stPosition0.Initialized AND stParam.stMachine.stPosition1.Initialized AND stParam.stMachine.stPosition2.Initialized AND stParam.stMachine.stPosition3.Initialized AND stParam.stMachine.stPosition4.Initialized THEN
			fbEtape.piSVal:=100;
		ELSE
			fbEtape.piSVal:=800;	
		END_IF
	100:fbEtape.psMess:='Auto | Wait UNTIL allowed TO go TO Pos4';
		IF fbBtn.xAllowedGetPiece THEN
			fbMotorX.mSetMoveAbsLent();
			fbMotorX.mcMoveAbsolute.Position:=stParam.stMachine.stPosition0.PosX + stParam.stMachine.stPosition4.PosX;
			fbMotorY.mSetMoveAbsLent();
			fbMotorY.mcMoveAbsolute.Position:=stParam.stMachine.stPosition0.PosY + stParam.stMachine.stPosition4.PosY;
			fbEtape.piSVal:=110;
		END_IF		
	110:fbEtape.psMess:='Auto | Wait until in Pos 4';
		IF fbMotorX.mcMoveAbsolute.Done AND fbMotorY.mcMoveAbsolute.Done THEN
			fbEtape.piSVal:=111;
		END_IF
	111:fbEtape.psMess:='Auto | Putting down Z ';
		fbMotorZ.mSetMoveAbsLent();
		fbMotorZ.mcMoveAbsolute.Position:=100;
		fbEtape.piSVal:=112;
	112:fbEtape.psMess:='Auto | Waiting until Z is down';
		IF fbMotorZ.mcMoveAbsolute.Done THEN
			fbEtape.piSVal:=111;
		END_IF
	113:fbEtape.psMess:='Auto | Closing Act1';
		IF fbAct1.xInOutPos		THEN
			fbEtape.piVal:=120;
		END_IF
	120:fbEtape.psMess:='Auto | Z go up';
		fbMotorZ.mSetMoveAbsLent();
		fbMotorZ.mcMoveAbsolute.Position:=0;
		fbEtape.piVal:=121; //all is ok;
	121:fbEtape.psMess:='Auto | Wait until Z is up and make a presence check';
		IF fbMotorZ.mcMoveAbsolute.Done AND fbBtn.xPiecePresent THEN
			fbEtape.piSVal:=130;
		END_IF
		IF fbMotorZ.mcMoveAbsolute.Done AND NOT fbBtn.xPiecePresent THEN
			fbEtape.piSVal:=122;
		END_IF
	122: fbEtape.psMess:='Auto | Open Act1 and go back one step';
		IF fbAct1.xInOutPos THEN
			fbEtape.piSVal:=111;
		END_IF
	130:fbEtape.psMess:='Auto | Go back to palette position';
			//check and calculate Palette dimensions and position where to put the object
			IF stParam.stRecipe.stPalette1.ActualPalettePositionY >= stParam.stRecipe.stPalette1.PaletteDimensionY THEN
				stParam.stRecipe.stPalette1.ActualPalettePositionY :=0;
				stParam.stRecipe.stPalette1.ActualPalettePositionX := stParam.stRecipe.stPalette1.ActualPalettePositionX +1;
				IF stParam.stRecipe.stPalette1.ActualPalettePositionX >= stParam.stRecipe.stPalette1.PaletteDimensionX THEN
					fbEtape.piSVal:=800;		//nous sommes hors des butees de la palette
				END_IF
			END_IF
			//calculate X-Position. (Xmax-Xmin) / Nombre de pos en X = increment par positionX
			//						Xactualle*increments + XminPosition =Position de cible
			fbMotorX.mSetMoveAbsLent();
			fbMotorX.mcMoveAbsolute.Position:=(stParam.stMachine.stPosition0.PosX + stParam.stMachine.stPosition1.PosX)
											+  stParam.stRecipe.stPalette1.ActualPalettePositionX
													* ( (stParam.stMachine.stPosition2.PosX-stParam.stMachine.stPosition0.PosX) / stParam.stRecipe.stPalette1.PaletteDimensionX );
			//meme chose pour Y
			fbMotorY.mSetMoveAbsLent();
			fbMotorY.mcMoveAbsolute.Position:=(stParam.stMachine.stPosition0.PosY + stParam.stMachine.stPosition1.PosY)
											+  stParam.stRecipe.stPalette1.ActualPalettePositionY
													* ( (stParam.stMachine.stPosition3.PosY-stParam.stMachine.stPosition0.PosY) / stParam.stRecipe.stPalette1.PaletteDimensionY );
			fbEtape.piSVal:=131;
	131:fbEtape.psMess:='Auto | Wait until in Pos 4';
		IF fbMotorX.mcMoveAbsolute.Done AND fbMotorY.mcMoveAbsolute.Done THEN
			fbEtape.piSVal:=140;
		END_IF
	140:fbEtape.psMess:='Auto | Putting down Z ';
		fbMotorZ.mSetMoveAbsLent();
		fbMotorZ.mcMoveAbsolute.Position:=100;
		fbEtape.piSVal:=141;
	141:fbEtape.psMess:='Auto | Waiting until Z is down';
		IF fbMotorZ.mcMoveAbsolute.Done THEN
			fbEtape.piSVal:=150;
		END_IF
	150:fbEtape.psMess:='Auto | Opening Act1';
		IF fbAct1.xInInPos		THEN
			fbEtape.piVal:=160;
		END_IF
	160:fbEtape.psMess:='Auto | Z go up';
		fbMotorZ.mSetMoveAbsLent();
		fbMotorZ.mcMoveAbsolute.Position:=0;
		fbEtape.piVal:=161; //all is ok;
	161:fbEtape.psMess:='Auto | Wait until Z is up';
		IF fbMotorZ.mcMoveAbsolute.Done THEN
			fbEtape.piSVal:=100;
		END_IF	
	
	800:fbEtape.psMess:='Auto | Error occured - Going into stock state';
		//turn off all motors and release all Actors
			fbEtape.piVal:=810;
	810:fbEtape.psMess:='Auto | Error occured - Press Reset to recover';
		//do nothing and wait
	
	999:fbEtape.psMess:='Auto | Finished';
		fbEtape.piVal:=0;
END_CASE

//***********************************
//Output affectation
//***********************************

xError:=(fbEtape.iNo=800 OR fbEtape.iNo=810);
xBusy:=fbEtape.iNo<>0;
xReady:=fbEtape.iNo=0;
iEtape:=fbEtape.iNo;]]></ST>
    </Implementation>
    <LineIds Name="FB_CycleAuto">
      <LineId Id="3" Count="18" />
      <LineId Id="168" Count="0" />
      <LineId Id="170" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="173" Count="1" />
      <LineId Id="171" Count="1" />
      <LineId Id="167" Count="0" />
      <LineId Id="158" Count="1" />
      <LineId Id="163" Count="1" />
      <LineId Id="156" Count="1" />
      <LineId Id="25" Count="5" />
      <LineId Id="175" Count="1" />
      <LineId Id="31" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="177" Count="1" />
      <LineId Id="38" Count="0" />
      <LineId Id="179" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="182" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="183" Count="1" />
      <LineId Id="42" Count="0" />
      <LineId Id="47" Count="1" />
      <LineId Id="185" Count="8" />
      <LineId Id="51" Count="0" />
      <LineId Id="194" Count="0" />
      <LineId Id="198" Count="0" />
      <LineId Id="195" Count="0" />
      <LineId Id="197" Count="0" />
      <LineId Id="199" Count="0" />
      <LineId Id="202" Count="0" />
      <LineId Id="201" Count="0" />
      <LineId Id="196" Count="0" />
      <LineId Id="204" Count="3" />
      <LineId Id="210" Count="1" />
      <LineId Id="208" Count="0" />
      <LineId Id="216" Count="0" />
      <LineId Id="209" Count="0" />
      <LineId Id="212" Count="1" />
      <LineId Id="53" Count="0" />
      <LineId Id="218" Count="23" />
      <LineId Id="56" Count="0" />
      <LineId Id="116" Count="1" />
      <LineId Id="119" Count="0" />
      <LineId Id="121" Count="14" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>